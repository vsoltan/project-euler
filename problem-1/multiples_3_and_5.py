#!/usr/bin/env python

class MultiplesOf(object):
  """docstring for MultiplesOf"""
  def __init__(self, base):
    super(MultiplesOf, self).__init__()
    self.base = base

  def generate_all_multiples_of(self, below):
    """Returns all mutiples of 'base' below given number.
  
    For instance, generate_all_multiples_of(10, 3) -> [3, 6, 9]
    """
    result = []
    multiple = self.base
    while multiple < below:
      result.append(multiple)
      multiple += self.base
    return result
    

class MultiplesOf3And5(object):
  """docstring for MultiplesOf3And5"""
  def __init__(self, below):
    super(MultiplesOf3And5, self).__init__()
    self.below = below
    self.multiples_of_3 = MultiplesOf(3)
    self.multiples_of_5 = MultiplesOf(5)

  def multiples(self):
    """Returns all mutiples of 3 and 5 below given number.
  
    For instance, multiples(10) -> [3, 5, 6, 9]
    """
    result = self.multiples_of_3.generate_all_multiples_of(self.below)
    result.extend(self.multiples_of_5.generate_all_multiples_of(self.below))
    # Return set() to remove duplicate entries, e.g.
    # result for below == 16 would contain two 15s: one generated by
    # multiples of 3, and the other - by multiples of 5.
    return set(result)

  def sum_of_multiples(self):
    """Returns sum of all mutiples of 3 and 5 below given number.
  
    For instance, sum_of_multiples(10) -> sum([3, 5, 6, 9]) -> 23
    """
    return sum(self.multiples())

if __name__ == '__main__':
  print 'Sum of all the multiples of 3 or 5 below 1000: {}'.format(
      MultiplesOf3And5(1000).sum_of_multiples())
